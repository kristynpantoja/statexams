?read.delim
?read.delim
test = read.delim("sample question.txt", sep = "\t")
test
dim(test)
test[1, 1]
test[1, 2]
test[2, 1]
test[2, ]
test[3, ]
test[ 1, ]
test[ 1, 1]
type(test)
class(test)
print(test)
test = read.delim("sample question.txt", sep = "\t", header = FALSE)
install.packages("readtext")
test = readtext("sample question.txt", sep = "\t", header = FALSE)
library(readtext)
test = readtext("sample question.txt", sep = "\t", header = FALSE)
?readtext
test = readtext("sample question.txt", dvsep = "\t")
dim(test)
test
test[2, 1]
dim(test)
test[1, 1]
test[1, 2]
test[1, 2]
class(test[1, 2])
length(test[1, 2])
dim(test[1, 2])
typeof(test[1, 2])
class(test[1, 2])
strsplit("Hello, World!", " ")
strsplit("Hello,\tWorld!", "\t")
strsplit(test, "\t")
strsplit(test[1, 2], "\t")
a = strsplit("Hello,\tWorld!", "\t")
dim(a)
lemgth(a)
lemgth(a[[1]])
length(a[[1]])
a[[1]]
a = strsplit(test[1, 2], "\t")
length(a[[1]])
strsplit(test[1, 2], "\t")
a[[1]]
# this is what the data looks like, after being imported:
# first element of test is the name of the txt file,
# second element of test is the contents of the txt file (i.e. long string of question and answers)
question_contents = strsplit(test[1, 2], "\t")
library(readtext)
test = readtext("sample question.txt", dvsep = "\t")
?readtext
dim(test)
test[1, 2]
class(test[1, 2])
print(test)
# this is what the data looks like, after being imported:
# first element of test is the name of the txt file,
# second element of test is the contents of the txt file (i.e. long string of question and answers)
question_contents = strsplit(test[1, 2], "\t")
question_contents[[1]]
question_contents = question_contents[[1]]
length(question_content)
length(question_contents)
question_contents = readtext("samplequestionlabeledparts.txt", dvsep = "\t")
dim(test)
test[1, 2]
readfile = readtext("samplequestionlabeledparts.txt", dvsep = "\t")
# dim(test)
# test[1, 1]
# test[1, 2]
class(test[1, 2])
print(test)
# this is what the data looks like, after being imported:
# first element of test is the name of the txt file,
# second element of test is the contents of the txt file (i.e. long string of question and answers)
question_contents = strsplit(readfile[1, 2], "\t") # this is a list
question_contents = question_contents[[1]] # this is a vector (of question, answer, answer, answer)
length(question_contents)
question_contents
question_contents
?grep
test[1, 2]
grep("\QHello, this is a question.", "\tQ")
grep("\tQHello, this is a question.", "\tQ")
grep("\tQ", "\tQHello, this is a question.")
grep("\tQ", "\tQHello, this is a question.", value = TRUE)
grep(c("\tQ", "\tA"), "\tQHello, this is a question.\tAAnd this is an answer.", value = TRUE)
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", delim = "\tQ,\tA")
?strsplit
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", delim = c("\tQ", "\tA"))
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = c("\tQ", "\tA"))
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\tQ"\tA")
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\tQ\tA")
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\tQ,\tA")
a = strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\tQ,\tA")
a
library(ldply)
install.packages("tidyverse")
library(plyr)
?ldply
x = list(c(1, "a", "b"), c(2, "a", "b", "c"), c(3, "a", "b", "c", "d", "e"))
rearrange = function(x){
#put checks here
num_ques = length(x)
ind = sample(num_ques)
reorder_ans = list(NA)
for(i in 1:num_ques){
num_ans = length(x[[i]]) #technically number of answers + 1
ind_ans = sample(2:num_ans)
reorder_ans[[i]] = x[[i]][1]
for(j in 2:num_ans){
reorder_ans[[i]][j] = x[[i]][ind_ans[j - 1]]
}
}
reorder_x = list(NA)
for(i in 1:num_ques){
reorder_x[i] = reorder_ans[ind[i]]
}
return(reorder_x)
}
rearrange(x)
grep("(\tQ.*)|(\tA.*)", "\tQHello, this is a question.\tAAnd this is an answer.", value = TRUE)
grep("(\tQ.*)|(\tA.*)", "\tQHello, this is a question.\tAAnd this is an answer.")
?grep
a = strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "(\tQ.*)|(\tA.*)")
a
regmatches("\tQHello, this is a question.\tAAnd this is an answer.", split = "(\tQ.*)|(\tA.*)")
regmatches(x = "\tQHello, this is a question.\tAAnd this is an answer.", m = "(\tQ.*)|(\tA.*)")
x <- c("A and B", "A, B and C", "A, B, C and D", "foobar")
pattern <- "[[:space:]]*(,|and)[[:space:]]"
## Match data from regexpr()
m <- regexpr(pattern, x)
pattern
regmatches
m
regmatches(x, m)
regmatches(x, m, invert = TRUE)
## Match data from gregexpr()
m <- gregexpr(pattern, x)
regmatches(x, m)
regmatches(x, m, invert = TRUE)
m
regmatches(x, m)
grep("(\\tQ.*)|(\\tA.*)", "\tQHello, this is a question.\tAAnd this is an answer.", value = TRUE)
grep("\\t", "\tQHello, this is a question.\tAAnd this is an answer.", value = TRUE)
grep("\t", "\tQHello, this is a question.\tAAnd this is an answer.", value = TRUE)
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\\t")
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\\tA")
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\\tQ|\\tA")
regmatch("\tQHello, this is a question.\tAAnd this is an answer.", split = "\\tQ|\\tA")
regmatch(x = "\tQHello, this is a question.\tAAnd this is an answer.", m = "\\tQ|\\tA")
?regex
grep(x = "\tQHello, this is a question.\tAAnd this is an answer.", pattern = "\\tQ|\\tA", value = TRUE)
grep(x = "\tQHello, this is a question.\tAAnd this is an answer.", pattern = "\\tQ|\\tA")
grep(x = "\tQHello, this is a question.\tAAnd this is an answer.", pattern = "\\tQ|\\tA", value = TRUE)
regmatches(x = "\tQHello, this is a question.\tAAnd this is an answer.", pattern = "\\tQ|\\tA", value = TRUE)
regmatches(x = "\tQHello, this is a question.\tAAnd this is an answer.", pattern = "\\tQ|\\tA")
regmatches(x = "\tQHello, this is a question.\tAAnd this is an answer.", m = "\\tQ|\\tA")
grep(x = "\tQHello, this is a question.\tAAnd this is an answer.", m = "\\tQ|\\tA")
?grep
x <- "http://stat.umn.edu:80/xyz"
m <- regexec("^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)", x)
m
m
m <- regexec("^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)", x, value = TRUE)
grep("[a-z]", letters)
grep("\\tQ|\\tA", "\tQHello, this is a question.\tAAnd this is an answer.")
grep("\tQ|\tA", "\tQHello, this is a question.\tAAnd this is an answer.")
strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\\tQ|\\tA")
vector = strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\\tQ|\\tA")
vector
question_contents = strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\\tQ|\\tA")
# how to ignore empty-ish elements in the beginning? such as tabs or spaces...
question_contents
# how to ignore empty-ish elements in the beginning? such as tabs or spaces...
question_contents[[1]]
# how to ignore empty-ish elements in the beginning? such as tabs or spaces...
question_contents = question_contents[[1]]
question_contents = question_contents[[1]] # add this as an element of the list of questions/answers
question_contents
# this is what the data looks like, after being imported:
# first element of test is the name of the txt file,
# second element of test is the contents of the txt file (i.e. long string of question and answers)
contents_as_string = test[1, 2]
question_contents = question_contents[[1]] # this is a vector (of question, answer, answer, answer)
# this is what the data looks like, after being imported:
# first element of test is the name of the txt file,
# second element of test is the contents of the txt file (i.e. long string of question and answers)
contents_as_string = test[1, 2]
readfile = readtext("samplequestionlabeledparts.txt", dvsep = "\t")
class(test[1, 2])
print(test)
# this is what the data looks like, after being imported:
# first element of test is the name of the txt file,
# second element of test is the contents of the txt file (i.e. long string of question and answers)
contents_as_string = test[1, 2]
# --- Testing things --- #
question_contents_list = strsplit("\tQHello, this is a question.\tAAnd this is an answer.", split = "\\tQ|\\tA")
question_contents = question_contents_list[[1]] # add this as an element of the list of questions/answers
question_contents
readfile = readtext("samplequestionlabeledparts.txt", dvsep = "\t")
contents_as_string = test[1, 2]
question_contents = question_contents_as_string[[1]] # this is a vector (of question, answer, answer, answer)
question_contents = contents_as_string[[1]] # this is a vector (of question, answer, answer, answer)
readfile = readtext("samplequestionlabeledparts.txt", dvsep = "\t")
contents_as_string = test[1, 2]
question_contents = contents_as_string[[1]] # this is a vector (of question, answer, answer, answer)
readfile = readtext("samplequestionlabeledparts.txt", dvsep = "\t")
contents_as_string = readfile[1, 2]
question_contents = contents_as_string[[1]] # this is a vector (of question, answer, answer, answer)
question_contents
question_contents_as_list = strsplit(question_contents, split = "\\tQ|\\tA")
question_contents_as_list
question_contents = question_contents_list[[1]] # add this as an element of the list of questions/answers
question_contents
question_contents_as_list
question_contents = question_contents_as_list[[1]] # add this as an element of the list of questions/answers
question_contents_as_list
readfile = readtext("samplequestionlabeledparts.txt", dvsep = "\t")
contents_as_string = readfile[1, 2]
question_contents = contents_as_string[[1]] # this is a vector (of question, answer, answer, answer)
question_contents_as_list = strsplit(question_contents, split = "\\tQ|\\tA")
question_contents = question_contents_as_list[[1]] # add this as an element of the list of questions/answers
question_contents_as_list
question_contents
question_contents
# 1. Read in the File
readfile = readtext("samplequestionlabeledparts.txt", dvsep = "\t")
# 2. Get the string containing Q and A's (one big string)
contents_as_string = readfile[1, 2]
question_contents_as_list = strsplit(contents_as_string, split = "\\tQ|\\tA")
question_contents = question_contents_as_list[[1]] # add this as an element of the list of questions/answers
question_contents
unlist(question_contents)
print(unlist(question_contents))
unlist(question_contents)
unlist(question_contents_as_list)
x = list(c(1, "a", "b"), c(2, "a", "b", "c"), c(3, "a", "b", "c", "d", "e"))
rearrange = function(x){
#put checks here
num_ques = length(x)
ind = sample(num_ques)
reorder_ans = x
for(i in 1:num_ques){
num_ans = length(x[[i]]) #technically number of answers + 1
ind_ans = sample(2:num_ans)
for(j in 2:num_ans){
reorder_ans[[i]][j] = x[[i]][ind_ans[j - 1]]
}
}
reorder_x = list(NA)
for(i in 1:num_ques){
reorder_x[i] = reorder_ans[ind[i]]
}
return(reorder_x)
}
xre = rearrange(x)
xre
xre_unlist = unlist(xre)
xre_unlist
length(xre_unlist)
typeof(xre_unlist)
paste(question_contents)
question_contents
a = paste(question_contents)
a
?paste
a = paste(question_contents, sep = " ")
a
a = paste0(question_contents, sep = " ")
a
a = paste(collapse(question_contents, sep = " "))
a = paste(question_contents, collapse = " ")
a
sink("testoutput.pdf", append=FALSE, split=FALSE)
?sink
sink("testoutput.pdf", append=FALSE, split=FALSE)
a
sink()
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
sink("testoutput.txt", append=FALSE, split=FALSE)
a
sink()
